services:
  db:
    image: postgres:16.4
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES__USER}
      - POSTGRES_PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES_DB=${POSTGRES__DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES__PORT}:${POSTGRES__PORT}"
    command: [
      "postgres",
      "-c", "port=${POSTGRES__PORT}"
    ]
    networks:
      - trading_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES__USER}", "-d", "${POSTGRES__DB}", "-p", "${POSTGRES__PORT}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"


  rabbitmq:
    image: rabbitmq:4.1.0-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT__USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT__PASS}
    ports:
      - "5672:5672"
    networks:
      - trading_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"

  migrator:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: migrator-runtime
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - trading_network

  

  consumer:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: consumer-runtime
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - trading_network

  trand:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: trand-runtime
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading_network

networks:
  trading_network:
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data:
